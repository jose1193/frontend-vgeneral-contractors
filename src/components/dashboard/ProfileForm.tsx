import React, { useState } from "react";
import { Field } from "formik";
import { Grid, TextField } from "@mui/material";
import { styled } from "@mui/material/styles";
import { UserData } from "../../../app/types/user";
import EmailField from "../../../app/components/EmailField";
import UsernameField from "../../../app/components/UsernameField";
import PhoneField from "../../../app/components/PhoneField";
import { handleNameChange, handleLastNameChange } from "../../utils/formatters";

const ProfileField = styled(TextField)(({ theme }) => ({
  marginBottom: theme.spacing(2),
}));

interface ProfileFormProps {
  user: UserData;
  setMapCoordinates: React.Dispatch<
    React.SetStateAction<{ lat: number; lng: number }>
  >;
  AddressAutocomplete: React.ComponentType<any>;
  setFieldValue: (field: string, value: any) => void;
}

const ProfileForm: React.FC<ProfileFormProps> = ({
  user,
  setMapCoordinates,
  AddressAutocomplete,
  setFieldValue,
}) => {
  const [usernameModifiedManually, setUsernameModifiedManually] =
    useState(false);
  const [generatedUsername, setGeneratedUsername] = useState<string>("");

  const handleAddressSelect = (addressDetails: any) => {
    if (addressDetails.latitude && addressDetails.longitude) {
      setMapCoordinates({
        lat: addressDetails.latitude,
        lng: addressDetails.longitude,
      });
      setFieldValue("latitude", addressDetails.latitude);
      setFieldValue("longitude", addressDetails.longitude);
      setFieldValue("address", addressDetails.address);
      setFieldValue("city", addressDetails.city);
      setFieldValue("state", addressDetails.state);
      setFieldValue("country", addressDetails.country);
      setFieldValue("zip_code", addressDetails.zip_code);
    }
  };

  const handleAddressClear = () => {
    setFieldValue("address", "");
    setFieldValue("city", "");
    setFieldValue("state", "");
    setFieldValue("country", "");
    setFieldValue("zip_code", "");
    setFieldValue("latitude", null);
    setFieldValue("longitude", null);
    setMapCoordinates({ lat: 0, lng: 0 });
  };

  return (
    <Grid container spacing={4}>
      <Grid item xs={12} sm={6}>
        <Field
          name="username"
          component={UsernameField}
          autoGenerated={generatedUsername}
          onManualChange={() => setUsernameModifiedManually(true)}
        />
      </Grid>
      <Grid item xs={12} sm={6}>
        <Field name="email" component={EmailField} />
      </Grid>
      <Grid item xs={12} sm={6}>
        <Field
          as={ProfileField}
          fullWidth
          name="name"
          label="First Name"
          variant="outlined"
          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
            handleNameChange(
              e.target.value,
              user,
              usernameModifiedManually,
              setGeneratedUsername,
              setFieldValue
            );
          }}
        />
      </Grid>
      <Grid item xs={12} sm={6}>
        <Field
          as={ProfileField}
          fullWidth
          name="last_name"
          label="Last Name"
          variant="outlined"
          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
            handleLastNameChange(
              e.target.value,
              user,
              usernameModifiedManually,
              setGeneratedUsername,
              setFieldValue
            );
          }}
        />
      </Grid>
      <Grid item xs={12} sm={6}>
        <PhoneField />
      </Grid>
      <Grid item xs={12} md={6}>
        <AddressAutocomplete
          onAddressSelect={handleAddressSelect}
          onAddressClear={handleAddressClear}
          name="address"
          label="Address"
          defaultValue={user.address || ""}
        />
      </Grid>
      <Grid item xs={12} sm={6}>
        <Field
          as={ProfileField}
          fullWidth
          name="address_2"
          label="Home Address - (Optional)"
          variant="outlined"
        />
      </Grid>
      <Grid item xs={12} md={6}>
        <Field
          as={ProfileField}
          fullWidth
          name="city"
          label="City"
          variant="outlined"
          InputProps={{ readOnly: true }}
          InputLabelProps={{ shrink: true }}
          sx={{
            "& .MuiInputBase-input.Mui-readOnly": {
              backgroundColor: "#f0f0f0",
            },
          }}
        />
      </Grid>
      <Grid item xs={12} md={6}>
        <Field
          as={ProfileField}
          fullWidth
          name="state"
          label="State"
          variant="outlined"
          InputProps={{ readOnly: true }}
          InputLabelProps={{ shrink: true }}
          sx={{
            "& .MuiInputBase-input.Mui-readOnly": {
              backgroundColor: "#f0f0f0",
            },
          }}
        />
      </Grid>
      <Grid item xs={12} md={6}>
        <Field
          as={ProfileField}
          fullWidth
          name="country"
          label="Country"
          variant="outlined"
          InputProps={{ readOnly: true }}
          InputLabelProps={{ shrink: true }}
          sx={{
            "& .MuiInputBase-input.Mui-readOnly": {
              backgroundColor: "#f0f0f0",
            },
          }}
        />
      </Grid>
      <Grid item xs={12} md={6}>
        <Field
          as={ProfileField}
          fullWidth
          name="zip_code"
          label="Zip Code"
          variant="outlined"
          InputProps={{ readOnly: true }}
          InputLabelProps={{ shrink: true }}
          sx={{
            "& .MuiInputBase-input.Mui-readOnly": {
              backgroundColor: "#f0f0f0",
            },
          }}
        />
      </Grid>
      <input type="hidden" name="latitude" />
      <input type="hidden" name="longitude" />
    </Grid>
  );
};

export default ProfileForm;
